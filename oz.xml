<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<language name="Oz" version="0.1" kateversion="2.4" section="Sources" extensions="*.oz;*.mozart" author="Alex Mattenet (alex@mattenet.com)" >
    <highlighting>
        <list name="definitions">
            <item> functor </item>
            <item> proc </item>
            <item> fun </item>
            <item> end </item>
            <item> declare </item>
            <item> in </item>
            <item> lazy </item>
        </list>
        <list name="operators">
            <item> # </item>
            <item> | </item>
            <item> - </item>
            <item> -&gt; </item>
            <item> -&gt;&gt; </item>
            <item> / </item>
            <item> . </item>
            <item> .. </item>
            <item> * </item>
            <item> + </item>
        </list>
        <list name="controls">
            <item> do </item>
            <item> else </item>
            <item> elsecase </item>
            <item> elseif </item>
            <item> if </item>
            <item> else </item>
            <item> case </item>
            <item> of </item>
            <item> then </item>
        </list>
        <list name="keywords">
            <item> &lt; </item>
            <item> &lt;= </item>
            <item> = </item>
            <item> == </item>
            <item> &gt; </item>
            <item> &gt;= </item>
            <item> andthen </item>
            <item> at </item>
            <item> attr </item>
            <item> catch </item>
            <item> choice </item>
            <item> class </item>
            <item> cond </item>
            <item> define </item>
            <item> dis </item>
            <item> div </item>
            <item> export </item>
            <item> fail </item>
            <item> feat </item>
            <item> finally </item>
            <item> for </item>
            <item> from </item>
            <item> import </item>
            <item> lock </item>
            <item> meth </item>
            <item> mod </item>
            <item> not </item>
            <item> or </item>
            <item> orelse </item>
            <item> prepare </item>
            <item> prop </item>
            <item> raise </item>
            <item> require </item>
            <item> self </item>
            <item> skip </item>
            <item> try </item>
            <item> unit </item>
        </list>
        <list name="constants">
            <item> $ </item>
            <item> nil </item>
            <item> true </item>
            <item> false </item>
        </list>
        <contexts>
            <context attribute="Normal Text" lineEndContext="#pop" name="Normal Text" >
                <keyword attribute="Keyword" context="#stay"    String="keywords" />
                <keyword attribute="Function" context="#stay"   String="definitions" />
                <keyword attribute="Control Flow" context="#stay"   String="controls" />
                <Detect2Chars attribute="Control Flow" context="#stay" char="[" char1="]" />
                <keyword attribute="Operator" context="#stay"   String="operators" />
                <keyword attribute="Constant" context="#stay"   String="constants" />
                
                <AnyChar attribute="Operator" context="#stay"   String="+-*/#|~&gt;&lt;" />
                <Detect2Chars attribute="Operator" context="#stay" char="&gt;" char1="=" />
                <Detect2Chars attribute="Operator" context="#stay" char="=" char1="&lt;" />
                <RegExpr attribute="Variable" context="#stay"   String="{\s*[A-Z](\w|\d)*" />
                <DetectChar attribute="Variable" context="#stay"    char="}" />
                <RegExpr attribute="Atom" context="#stay"       String="\b[a-z](\w|\d)*" />
                <DetectChar attribute="String" context="string" char="&quot;" />
                
                <Int attribute="Int" context="#stay" />
                <Float attribute="Float" context="#stay" />
                
                <DetectChar attribute="String" context="string" char="&quot;" />
                
                
                <DetectChar attribute="Comment" context="comment" char="%" />
                <Detect2Chars attribute="Comment" context="multiLineComment" char="/" char1="*" />
            </context>
            
            <context attribute="String" lineEndContext="#stay" name="string" >
                <HlCStringChar attribute="Atom" context="#stay"/>
                <DetectChar attribute="String" context="#pop" char="&quot;" />
            </context>
            
            <context attribute="Comment" lineEndContext="#pop" name="comment" >
            </context>
            
            <context attribute="Comment" lineEndContext="#stay" name="multiLineComment" >
                <Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" />
            </context>
            
        </contexts>
        <itemDatas>
            <itemData name="Normal Text" defStyleNum="dsNormal" />
            <itemData name="Keyword" defStyleNum="dsKeyword" />
            <itemData name="String" defStyleNum="dsString" />
            <itemData name="Function" defStyleNum="dsFunction" />
            <itemData name="Control Flow" defStyleNum="dsControlFlow" />
            <itemData name="Operator" defStyleNum="dsOperator" />
            <itemData name="Constant" defStyleNum="dsBuiltIn" />
            <itemData name="Variable" defStyleNum="dsVariable" />
            <itemData name="Atom" defStyleNum="dsChar" />
            <itemData name="Int" defStyleNum="dsDecVal" />
            <itemData name="Float" defStyleNum="dsFloat" />
            
            <itemData name="Comment" defStyleNum="dsComment"/>
        </itemDatas>
    </highlighting>
    <general>
        <comments>
            <comment name="singleLine" start="%"/>
            <comment name="multiLine" start="/*" end="*/" />
        </comments>
        <keywords casesensitive="1"/>
    </general>
</language>
